openapi: 3.0.4
info:
  title: Online Bookstore API
  version: 0.0.1-SNAPSHOT
  description: |-
    The Online Bookstore API provides a robust platform for managing an online book retail system.
    
    It handles book inventory management, enabling seamless tracking and updating of book stock.
    
    The API supports purchase processing and dynamic book pricing, ensuring accurate transactions and 
    flexible pricing strategies. 
    
    Additionally, it manages customer loyalty points, rewarding repeat customers with points for purchases, 
    which can be redeemed for discounts or perks, enhancing user engagement and retention.
  contact:
    email: pedraza.miguez@gmail.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: http://localhost:8080
    description: Local server

tags:
  - name: book
    description: Book management and details retrieval
  - name: inventory
    description: Inventory management and book stock tracking
  - name: order
    description: Order management and purchase processing
  - name: customer
    description: Customer operations and loyalty points consultation

paths:

  /v1/books/{bookId}:

    get:
      tags:
        - book
      summary: Get book details by ID
      description: Get book details by ID
      operationId: getBookById
      parameters:
        - name: bookId
          in: path
          description: ID of the book to retrieve
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
          example: 178
      responses:
        '200':
          description: Book details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: "BAD_REQUEST"
                message: "getBookById.bookId: must be greater than or equal to 1"
                path: "/v1/books/0"
                timestamp: "2025-04-19T02:25:11.675837"
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: "NOT_FOUND"
                message: "Book with ID 792 not found"
                path: "/v1/books/792"
                timestamp: "2025-04-19T02:27:08.219446"
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: "INTERNAL_SERVER_ERROR"
                message: "An unexpected error occurred"
                path: "/v1/books/178"
                timestamp: "2025-04-18T03:19:34.714622"
      security:
        - basicAuth: [ ]

    put:
      tags:
        - book
      summary: Update book details
      description: Update book details
      operationId: updateBook
      requestBody:
        $ref: '#/components/requestBodies/Book'
      parameters:
        - name: bookId
          in: path
          description: ID of the book to update
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
          example: 178
      responses:
        '200':
          description: Book updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Book structure is malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: "BAD_REQUEST"
                message: "author: must not be null"
                path: "/v1/books/178"
                timestamp: "2025-04-18T16:19:34.714622"
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: "NOT_FOUND"
                message: "Book with ID 178 not found"
                path: "/v1/books/178"
                timestamp: "2025-04-19T02:27:08.219446"
        '409':
          description: Book already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: "CONFLICT"
                message: "Book with ISBN 9780747532743 already exists"
                path: "/v1/books/178"
                timestamp: "2025-04-18T16:19:34.714622"
        '422':
          description: Book structure is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: "UNPROCESSABLE_ENTITY"
                message: "Unexpected value 'SALE'"
                path: "/v1/books/178"
                timestamp: "2025-04-18T16:19:34.714622"
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: "INTERNAL_SERVER_ERROR"
                message: "An unexpected error occurred"
                path: "/v1/books/178"
                timestamp: "2025-04-18T16:19:34.714622"
      security:
        - basicAuth: [ ]

    delete:
      tags:
        - book
      summary: Delete book by ID
      description: Delete book by ID
      operationId: deleteBook
      parameters:
        - name: bookId
          in: path
          description: ID of the book to delete
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
          example: 178
      responses:
        '204':
          description: Book deleted successfully
        '400':
          description: Invalid ID supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: "BAD_REQUEST"
                message: "getBookById.bookId: must be greater than or equal to 1"
                path: "/v1/books/0"
                timestamp: "2025-04-19T02:25:11.675837"
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: "NOT_FOUND"
                message: "Book with ID 792 not found"
                path: "/v1/books/792"
                timestamp: "2025-04-19T02:27:08.219446"
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: "INTERNAL_SERVER_ERROR"
                message: "An unexpected error occurred"
                path: "/v1/books/178"
                timestamp: "2025-04-18T03:19:34.714622"
      security:
        - basicAuth: [ ]

  /v1/books:

    get:
      tags:
        - book
      summary: Get all books
      description: Get all books
      operationId: getAllBooks
      responses:
        '200':
          description: All books retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookList'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: "INTERNAL_SERVER_ERROR"
                message: "An unexpected error occurred"
                path: "/v1/books"
                timestamp: "2025-04-18T16:19:34.714622"
      security:
        - basicAuth: [ ]

    post:
      tags:
        - book
      summary: Add a new book
      description: Add a new book to the bookstore
      operationId: addBook
      requestBody:
        $ref: '#/components/requestBodies/Book'
      responses:
        '201':
          description: Book created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Book structure is malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: "BAD_REQUEST"
                message: "author: must not be null"
                path: "/v1/books"
                timestamp: "2025-04-18T16:19:34.714622"
        '409':
          description: Book already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: "CONFLICT"
                message: "Book with ISBN 9780747532743 already exists"
                path: "/v1/books"
                timestamp: "2025-04-18T16:19:34.714622"
        '422':
          description: Book structure is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: "UNPROCESSABLE_ENTITY"
                message: "Unexpected value 'SALE'"
                path: "/v1/books"
                timestamp: "2025-04-18T16:19:34.714622"
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: "INTERNAL_SERVER_ERROR"
                message: "An unexpected error occurred"
                path: "/v1/books"
                timestamp: "2025-04-18T16:19:34.714622"
      security:
        - basicAuth: [ ]

  /v1/inventory:

    get:
      tags:
        - inventory
      summary: Get inventory details
      description: Get inventory details
      operationId: getInventory
      parameters:
        - name: includeOutOfStock
          in: query
          description: Whether to include out-of-stock books
          required: false
          schema:
            type: boolean
            default: false
          example: true
      responses:
        '200':
          description: Inventory details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryItems'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: "INTERNAL_SERVER_ERROR"
                message: "An unexpected error occurred"
                path: "/v1/inventory"
                timestamp: "2025-04-18T16:19:34.714622"
      security:
        - basicAuth: [ ]

    post:
      tags:
        - inventory
      summary: Add book copies to inventory
      description: Add book copies to inventory
      operationId: addBookCopiesToInventory
      requestBody:
        $ref: '#/components/requestBodies/Inventory'
      responses:
        '204':
          description: Book copies added to inventory successfully
        '400':
          description: Inventory structure is malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: "BAD_REQUEST"
                message: "copies: must not be null"
                path: "/v1/inventory"
                timestamp: "2025-04-18T16:19:34.714622"
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: "NOT_FOUND"
                message: "Book with ID 792 not found"
                path: "/v1/inventory"
                timestamp: "2025-04-19T02:27:08.219446"
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: "INTERNAL_SERVER_ERROR"
                message: "An unexpected error occurred"
                path: "/v1/inventory"
                timestamp: "2025-04-18T16:19:34.714622"
      security:
        - basicAuth: [ ]

  /v1/orders/current:

    get:
      tags:
        - order
      summary: Get current order details
      description: Get current order details
      operationId: getCurrentOrder
      responses:
        '200':
          description: Current order details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '204':
          description: Current order is empty
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: "INTERNAL_SERVER_ERROR"
                message: "An unexpected error occurred"
                path: "/v1/orders/current"
                timestamp: "2025-04-18T16:19:34.714622"
      security:
        - basicAuth: [ ]

    delete:
      tags:
        - order
      summary: Clear current order
      description: Clear current order
      operationId: clearCurrentOrder
      responses:
        '204':
          description: Current order cleared successfully
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: "INTERNAL_SERVER_ERROR"
                message: "An unexpected error occurred"
                path: "/v1/orders/current"
                timestamp: "2025-04-18T16:19:34.714622"
      security:
        - basicAuth: [ ]

  /v1/orders/current/books/{bookId}:

    put:
      tags:
        - order
      summary: Add book to current order
      description: Add book to current order
      operationId: addBookToCurrentOrder
      parameters:
        - name: bookId
          in: path
          description: ID of the book to add to the current order
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
          example: 178
      requestBody:
        $ref: '#/components/requestBodies/Allocation'
      responses:
        '200':
          description: Book added to current order successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: "BAD_REQUEST"
                message: "copies: must not be null"
                path: "/v1/orders/current/books/178"
                timestamp: "2025-04-19T02:25:11.675837"
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: "INTERNAL_SERVER_ERROR"
                message: "An unexpected error occurred"
                path: "/v1/orders/current/books/178"
                timestamp: "2025-04-18T16:19:34.714622"
      security:
        - basicAuth: [ ]

    delete:
      tags:
        - order
      summary: Remove book from current order
      description: Remove book from current order
      operationId: removeBookFromCurrentOrder
      parameters:
        - name: bookId
          in: path
          description: ID of the book to remove from the current order
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
          example: 178
      responses:
        '204':
          description: Book removed from current order successfully
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: "INTERNAL_SERVER_ERROR"
                message: "An unexpected error occurred"
                path: "/v1/orders/current/books/178"
                timestamp: "2025-04-18T16:19:34.714622"
      security:
        - basicAuth: [ ]

  /v1/orders/current/purchase:

    post:
      tags:
        - order
      summary: Purchase current order
      description: Purchase current order
      operationId: purchaseCurrentOrder
      responses:
        '204':
          description: Current order purchased successfully
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: "INTERNAL_SERVER_ERROR"
                message: "An unexpected error occurred"
                path: "/v1/orders/current/purchase"
                timestamp: "2025-04-18T16:19:34.714622"
      security:
        - basicAuth: [ ]

  /v1/orders:

    get:
      tags:
        - order
      summary: Get order history for the current customer
      description: Get order history for the current customer
      operationId: getOrderHistory
      responses:
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: "INTERNAL_SERVER_ERROR"
                message: "An unexpected error occurred"
                path: "/v1/orders"
                timestamp: "2025-04-18T16:19:34.714622"
      security:
        - basicAuth: [ ]

  /v1/orders/{orderId}:

    get:
      tags:
        - order
      summary: Get order by ID
      description: Get order by ID
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of the order to retrieve
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
          example: 178
      responses:
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: "INTERNAL_SERVER_ERROR"
                message: "An unexpected error occurred"
                path: "/v1/orders/23"
                timestamp: "2025-04-18T16:19:34.714622"
      security:
        - basicAuth: [ ]

  /v1/customers/loyalty-points:

    get:
      tags:
        - customer
      summary: Get current customer loyalty points
      description: Get current customer loyalty points
      operationId: getCurrentCustomerLoyaltyPoints
      responses:
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: "INTERNAL_SERVER_ERROR"
                message: "An unexpected error occurred"
                path: "/v1/customers/loyalty-points"
                timestamp: "2025-04-18T16:19:34.714622"
      security:
        - basicAuth: [ ]

  /v1/customers/{customerId}/loyalty-points:

    get:
      tags:
        - customer
      summary: Get customer loyalty points
      description: Get customer loyalty points
      operationId: getCustomerLoyaltyPoints
      parameters:
        - name: customerId
          in: path
          description: ID of the customer to retrieve loyalty points for
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
          example: 178
      responses:
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                status: "INTERNAL_SERVER_ERROR"
                message: "An unexpected error occurred"
                path: "/v1/customers/2/loyalty-points"
                timestamp: "2025-04-18T16:19:34.714622"
      security:
        - basicAuth: [ ]

components:
  schemas:

    Book:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 178
        isbn:
          type: string
          description: ISBN of the book
          example: "9780747532743"
        title:
          type: string
          description: Title of the book
          example: "Effective Java"
        author:
          type: string
          description: Author of the book
          example: "Joshua Bloch"
        publisher:
          type: string
          description: Publisher of the book
          example: "Addison-Wesley"
        year:
          type: integer
          description: Year of publication
          example: 2008
        price:
          type: string
          format: decimal
          description: Price of the book
          example: "21.99"
        genre:
          type: string
          description: Genre of the book
          enum:
            - FICTION
            - NON_FICTION
            - MYSTERY
            - FANTASY
            - SCIENCE_FICTION
            - BIOGRAPHY
            - HISTORY
            - ROMANCE
            - THRILLER
            - CHILDREN
        type:
          type: string
          description: Type of the book
          enum:
            - NEW_RELEASE
            - REGULAR
            - OLD_EDITION

    BookRequest:
      required:
        - isbn
        - title
        - author
        - publisher
        - year
        - price
        - genre
        - type
      type: object
      properties:
        isbn:
          type: string
          description: ISBN of the book
          example: "9780747532743"
        title:
          type: string
          description: Title of the book
          example: "Effective Java"
        author:
          type: string
          description: Author of the book
          example: "Joshua Bloch"
        publisher:
          type: string
          description: Publisher of the book
          example: "Addison-Wesley"
        year:
          type: integer
          description: Year of publication
          example: 2008
        price:
          type: string
          format: decimal
          description: Price of the book
          example: "21.99"
        genre:
          type: string
          description: Genre of the book
          enum:
            - FICTION
            - NON_FICTION
            - MYSTERY
            - FANTASY
            - SCIENCE_FICTION
            - BIOGRAPHY
            - HISTORY
            - ROMANCE
            - THRILLER
            - CHILDREN
        type:
          type: string
          description: Type of the book
          enum:
            - NEW_RELEASE
            - REGULAR
            - OLD_EDITION

    InventoryItem:
      type: object
      properties:
        bookId:
          type: integer
          format: int64
          description: ID of the book in inventory
          example: 178
        isbn:
          type: string
          description: ISBN of the book
          example: "9780747532743"
        title:
          type: string
          description: Title of the book
          example: "Effective Java"
        author:
          type: string
          description: Author of the book
          example: "Joshua Bloch"
        publisher:
          type: string
          description: Publisher of the book
          example: "Addison-Wesley"
        year:
          type: integer
          description: Year of publication
          example: 2008
        price:
          type: string
          format: decimal
          description: Price of the book
          example: "21.99"
        genre:
          type: string
          description: Genre of the book
          enum:
            - FICTION
            - NON_FICTION
            - MYSTERY
            - FANTASY
            - SCIENCE_FICTION
            - BIOGRAPHY
            - HISTORY
            - ROMANCE
            - THRILLER
            - CHILDREN
        type:
          type: string
          description: Type of the book
          enum:
            - NEW_RELEASE
            - REGULAR
            - OLD_EDITION
        copies:
          type: integer
          format: int32
          description: Number of copies available in inventory
          example: 10
        lastUpdatedAt:
          type: string
          format: date-time
          description: Last updated timestamp of the inventory item
          example: "2025-04-18T16:19:34.714622"
        lastUpdatedBy:
          type: string
          description: User who last updated the inventory item
          example: "admin"

    InventoryItems:
      type: array
      items:
        $ref: '#/components/schemas/InventoryItem'

    BookList:
      type: array
      items:
        $ref: '#/components/schemas/Book'

    InventoryRequest:
      required:
        - bookId
        - copies
      type: object
      properties:
        bookId:
          type: integer
          format: int64
          description: ID of the book to add to inventory
          example: 178
        copies:
          type: integer
          format: int32
          description: Number of copies to add to inventory
          minimum: 1
          maximum: 1000
          example: 10

    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 178

    Error:
      type: object
      properties:
        status:
          type: string
          description: HTTP status constant
        message:
          type: string
          description: Error message
        path:
          type: string
          description: Path of the request
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the error

    Allocation:
      required:
        - copies
      type: object
      properties:
        copies:
          type: integer
          format: int32
          description: Number of copies to allocate
          minimum: 1
          maximum: 1000
          example: 2

  requestBodies:

    Book:
      description: Book object that needs to be added to the store
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BookRequest'

    Allocation:
      description: Allocation object that needs to be added to the order
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Allocation'

    Inventory:
      description: Inventory object that needs to be added to the store
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InventoryRequest'

  securitySchemes:
    basicAuth:
      type: http
      scheme: basic

security:
  - basicAuth: [ ]
